---
- set_fact:
    all_excluded_resources: "{{ excluded_resources }}"

- set_fact:
    all_excluded_resources: "{{ all_excluded_resources + ['imagestreams'] }}"
  when: disable_image_migration|bool and 'imagestreams' not in excluded_resources

- set_fact:
    all_excluded_resources: "{{ all_excluded_resources + ['persistentvolumes'] }}"
  when: disable_pv_migration|bool and 'persistentvolumes' not in excluded_resources

- set_fact:
    all_excluded_resources: "{{ all_excluded_resources + ['persistentvolumeclaims'] }}"
  when: disable_pv_migration|bool and 'persistentvolumeclaims' not in excluded_resources

- name: "Set up mig controller RBAC"
  k8s:
    state: present
    definition: "{{ lookup('template', 'mig_rbac.yml.j2') }}"

- name: Create mig-cluster-config configmap
  k8s:
    state: "present"
    definition: "{{ lookup('template', 'mig-cluster-config.yml.j2') }}"

- name: Create non-admin rbac
  k8s:
    state: "present"
    definition: "{{ lookup('template', 'mig-non-admin-rbac.yml.j2') }}"

- set_fact:
    controller_state: present
  when:
  - migration_controller is defined
  - migration_controller

- k8s:
    state: "{{ controller_state }}"
    definition: "{{ lookup('template', 'controller.yml.j2') }}"

- name: "Set up discovery service and route"
  k8s:
    state: present
    definition: "{{ lookup('template', 'discovery.yml.j2') }}"

- name: Check if cloud-credentials secret exists already so we don't update it
  k8s_facts:
    api_version: v1
    kind: Secret
    name: "{{ velero_aws_secret_name }}-{{ namespace }}"
    namespace: "{{ mig_namespace }}"
  register: secret_status

- name: Check if gcp-cloud-credentials secret exists already so we don't update it
  k8s_facts:
    api_version: v1
    kind: Secret
    name: "{{ velero_gcp_secret_name }}-{{ namespace }}"
    namespace: "{{ mig_namespace }}"
  register: gcp_secret_status

- name: Check if azure-cloud-credentials secret exists already so we don't update it
  k8s_facts:
    api_version: v1
    kind: Secret
    name: "{{ velero_azure_secret_name }}-{{ namespace }}"
    namespace: "{{ mig_namespace }}"
  register: azure_secret_status

- name: "Create empty velero S3 secret"
  k8s:
    state: "present"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ velero_aws_secret_name }}-{{ namespace }}"
        namespace: "{{ mig_namespace }}"
      data:
        cloud: ""
  when: (secret_status.resources|length) == 0

- name: "Create empty velero gcp secret"
  k8s:
    state: "present"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ velero_gcp_secret_name }}-{{ namespace }}"
        namespace: "{{ mig_namespace }}"
      data:
        cloud: ""
  when: (gcp_secret_status.resources|length) == 0

- name: "Create empty velero azure secret"
  k8s:
    state: "present"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ velero_azure_secret_name }}-{{ namespace }}"
        namespace: "{{ mig_namespace }}"
      data:
        cloud: ""
  when: (azure_secret_status.resources|length) == 0

- name: "Set up velero supporting resources"
  k8s:
    state: "present"
    definition: "{{ lookup('template', 'velero_supporting.yml.j2') }}"

- name: "Set up velero controller"
  k8s:
    state: "present"
    definition: "{{ lookup('template', 'velero.yml.j2') }}"
